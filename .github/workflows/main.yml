name: CI/CD
on:
  push:
    branches: [main]
env:
  APP_NAME: TestTaskForBackend
permissions: write-all
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Get Code  
        uses: actions/checkout@v3
         
      - name: Login to GitHub Packages
        shell: bash
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Convert to repository name lowercase
        id: imageName-lowercase
        uses: ASzc/change-string-case-action@v5
        env:
          REPO_NAME: docker.pkg.github.com/${{ github.repository }}/${{ env.APP_NAME }}:${{ github.run_number }}
        with:
          string: ${{ env.REPO_NAME }}

      - name: Build, tag, and push docker image to GitHub Packages
        id: build-image
        shell: bash
        env:
          REPOSITORY_NAME: ${{ steps.imageName-lowercase.outputs.lowercase }}
          CONTEXT: .
        run: |
          docker build -t ${REPOSITORY_NAME} ${CONTEXT} 
          docker push ${REPOSITORY_NAME} 

      - name: Get lowercase package name
        id: packageName-lowercase
        uses: ASzc/change-string-case-action@v5
        env:
          PACKAGE_NAME: ${{ github.event.repository.name }}/${{ env.APP_NAME }}
        with:
          string: ${{ env.PACKAGE_NAME }}

      - name: Delete old images
        id: delete-images
        uses: actions/delete-package-versions@v4.1.1
        with:
          package-name: ${{ steps.packageName-lowercase.outputs.lowercase }}
          package-type: 'container'
          min-versions-to-keep: 2
          
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.ACTION_PRIVATE_KEY }}" > ~/.ssh/github-actions-key
          chmod 600 ~/.ssh/github-actions-key
          cat >>~/.ssh/config <<END
          Host VM
            HostName ${{ secrets.SSH_HOST }}
            User ${{ vars.EC2_USER }}
            IdentityFile ~/.ssh/github-actions-key
            StrictHostKeyChecking no
          END

      - name: EC2 configuration
        env:
          NAME: app
          IMAGE: ${{ steps.imageName-lowercase.outputs.lowercase }}
        run: |  
          ssh VM bash -s <<EOF
          sudo su 
          
          sudo chmod 666 /var/run/docker.sock
            
          sudo snap install yq 
            
          docker login docker.pkg.github.com -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }} 
            
          cd blog 
          docker-compose down 
            
          export NAME=$NAME 
          export IMAGE=$IMAGE
            
          echo $NAME
          echo $IMAGE

          yq e -i '.services.$NAME.image=env(IMAGE)' docker-compose.yaml 
            
          docker-compose up -d
          EOF
